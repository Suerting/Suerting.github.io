(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{429:function(n,t,e){"use strict";e.r(t);var a=e(2),s=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"_1-vscode插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-vscode插件"}},[n._v("#")]),n._v(" 1，vscode插件")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1，下载vetur插件，vue文件基本语法的高亮插件\n\n2，下载eslint插件的安装，它是一款智能错误检测插件\n\n3，下载Auto Rename Tag 自动完成另一侧标签的同步修改\n\n3，下载Auto Close Tag 回车补齐标签\n\n(https://blog.csdn.net/xw_009/article/details/105359325)\n\nhttps://blog.csdn.net/weixin_39930671/article/details/110475247\n")])])]),t("h2",{attrs:{id:"_2-创建vue项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建vue项目"}},[n._v("#")]),n._v(" 2，创建vue项目")]),n._v(" "),t("p",[n._v("1，在放vue代码的文件夹下打开cmd，输入vue create my-project，不能有大写，成功后按照提示输入")]),n._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230307174317840.png",alt:"image-20230307174317840"}})]),n._v(" "),t("p",[n._v("2，打开vscode，导入项目，打开项目的终端")]),n._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230307174348975.png",alt:"image-20230307174348975"}})]),n._v(" "),t("p",[n._v("3，输入npm install")]),n._v(" "),t("p",[n._v("下载依赖")]),n._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230307174431533.png",alt:"image-20230307174431533"}})]),n._v(" "),t("p",[n._v("4，输入npm run serve")]),n._v(" "),t("p",[n._v("启动项目")]),n._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230307174506827.png",alt:"image-20230307174506827"}})]),n._v(" "),t("p",[n._v("5，修改报错")]),n._v(" "),t("p",[n._v("https://blog.csdn.net/weixin_43214005/article/details/123044266")]),n._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230312171200083.png",alt:"image-20230312171200083"}})]),n._v(" "),t("h2",{attrs:{id:"_3-部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-部署"}},[n._v("#")]),n._v(" 3，部署")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("打开项目文件夹，在该文件夹下打开cmd\n\n输入npm run build，之后会生成dist文件夹\n\n报错解决：打开vscode，修改dist下的html文件的js路径，正确为./js\n")])])]),t("h2",{attrs:{id:"_4-vue语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue语法"}},[n._v("#")]),n._v(" 4，vue语法")]),n._v(" "),t("h3",{attrs:{id:"_1-插值和指令语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-插值和指令语法"}},[n._v("#")]),n._v(" 1，插值和指令语法")]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("插值语法用于解析标签体内容")]),n._v(" "),t("p",[n._v("指令语法用于解析标签")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div id="root">\n    <h1>插值语法</h1>\n    <h2>{{name}}</h2>\n    <h1>指令语法</h1>\n    \x3c!-- v-bind --\x3e\n    <a href="url">原始html，a标签跳转</a><br>\n    <a v-bind:href="url">指令点击跳转v-bind:href</a><br>\n    \x3c!-- .toUpperCase()是链接都大写 --\x3e\n    <a v-bind:href="url.toUpperCase()">指令点击跳转v-bind:href</a><br>\n    <a :href="url">指令简写：href</a>\n/div>\n\n\n<script type="text/javascript">\n        // 阻止vue在启动时生成生产提示\n        Vue.config.productionTip=false\n        // 创建vue实例，{}传参，对象；想要Vue工作就必须创建一个实例，且传入一个配置对象\n        const vm=new Vue({\n            // element指定当前Vue实例为哪个容器服务,值通常为选择器字符串\n            el:\'#root\',\n            // js写法\n            // el:document.getElementById(\'root\'),\n            data:({//data中用于存储数据，数据供el所指定的容器去使用\n                name:\'djikf\',\n                url:\'https://www.baidu.com\'\n            })\n        })\n<\/script>\n')])])]),t("h3",{attrs:{id:"_2-v-html"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-v-html"}},[n._v("#")]),n._v(" 2，v-html")]),n._v(" "),t("p",[n._v("显示html属性")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div>\n      <p>原始html，纯文本:{{rawHtml}}</p>\n      <p>v-html指令:<span v-html="rawHtml"></span></p>\n </div>\n')])])]),t("p",[n._v("效果：")]),n._v(" "),t("p",[t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230307204146838.png",alt:"image-20230307204146838"}})]),n._v(" "),t("h3",{attrs:{id:"_2-v-bind指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-v-bind指令"}},[n._v("#")]),n._v(" 2，v-bind指令")]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("用于响应式的更新html属性，一般我们要想在元素节点的属性上绑定vue的data数据，是不可以直接使用"+n._s()+"插入值语法来使用")])]),t("p",[n._v("例如：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<p style="color:blue">style="color:blue"</p>\n<p style="style1">style="style1"</p>\n<p v-bind:style="style1">v-bind:style="style1"</p>\n<p :class="[fontColor,fontSize]">v-bind绑定class属性（数组）</p>\n\ndata(){\n    return{\n      fontSize:"fontSize",\n      fontColor:"fontColor"\n    }\n  },\n\n<style>\n  .fontSize{\n    font-size: 5px;\n  }\n  .fontColor{\n    color: blue;\n  }\n</style>\n')])])]),t("p",[n._v("效果："),t("img",{attrs:{src:"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230307212042860.png",alt:"image-20230307212042860"}})]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" \x3c!-- 动态绑定多个值 --\x3e\n <a v-bind=\"vbindmorevalue\">绑定多个值</a>\n    \ndata(){\n    return{\n      vbindmorevalue:{\n        href:'https://cn.vuejs.org/guide/essentials/computed.html',\n        style:'color:green;text-decoration: none;'\n      }\n    }\n  },\n")])])]),t("h3",{attrs:{id:"_3-v-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-v-model"}},[n._v("#")]),n._v(" 3，v-model")]),n._v(" "),t("h4",{attrs:{id:"数据绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据绑定"}},[n._v("#")]),n._v(" 数据绑定")]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("v-modle双向绑定，能从data流向页面，也能从页面流向data，为表单元素准备，input，select\nv-bind单向绑定，只能从data流向页面")]),n._v(" "),t("p",[n._v("v-modle:value可以简写为v-model，因为v-modle默认收集的就是value的值")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div>\n    单向绑定：<input v-bind="name"/><br>\n    单向绑定：<input v-bind:value="name"/><br>\n    双向绑定：输入姓名：<input v-model="name"/><br>\n    Hello!{{name}}\n   <div style="text-align:center;width:50%">\n   <h1>数据双向绑定与MVVM模式解析</h1>\n   <div class="lianxi2">\n        姓名：<input v-model="namexm" placeholder="输入姓名"><br>\n        班级：<input v-model="class1" placeholder="输入班级"><br>\n        专业：<input v-model="zhuanye" placeholder="输入专业"><br>\n      <h2>专业{{zhuanye}},班级：{{class1}}，姓名：{{namexm}},欢迎您！</h2>\n     </div>\n</div>\n\n\ndata(){\n    return{\n      name:\'插值语法\',\n      namexm:\'\',\n      class1:\'\',\n      zhuanye:\'\'\n    }\n  },\n')])])]),t("h3",{attrs:{id:"_4-表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-表达式"}},[n._v("#")]),n._v(" 4，表达式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<p>{{rawHtml.split('').reverse().join('') }}</p>\n<div>{{user.id ? '修改用户' : '添加用户'}}</div>\n<p>常量表达式：{{5+3*6}}</p>\n<p>函数：{{Math.pow(x,2)+5}}</p>\n<p>三元表达式：{{yesNo?'确定':'取消'}}</p>\n<p>字符串表达式：{{message.split('').reverse().join('')}}</p>\n\n\ndata(){\n    return{\n      rawHtml:'<span style=\"color: red\">This should be red.</span>',\n      yesNo:true,\n      message:'shduhcdj',\n      namexm:'',\n      class1:'',\n      zhuanye:'',\n      user: {\n        id: 1,\n      },\n    }\n  },\n")])])]),t("h3",{attrs:{id:"_5-el和data两种写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-el和data两种写法"}},[n._v("#")]),n._v(" 5，el和data两种写法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("第一种\nconst vm=new Vue({\n      // element指定当前Vue实例为哪个容器服务,值通常为选择器字符串\n      el:'#root',//el第一种写法\n      // js写法\n      // el:document.getElementById('root'),\n\n      // data的第一种写法：对象式\n      // data中所有的属性最后都出现在vm身上\n      data:({//data中用于存储数据，数据供el所指定的容器去使用\n          name:'djikf',\n          url:'https://www.baidu.com'\n       })\n})\n\n第二种\nconst vm=new Vue({\n       // data的第二种写法：函数式\n      // 可简写为data(){}\n      data:function(){\n      \t\tconsole.log('@@@',this)//此处的this是Vue实例对象\n            return{\n                name:'suerting',\n                address:'wowoowowo'\n       \t\t}\n      }\n})\nvm.$mount('#root')//el第二种写法\n")])])]),t("h3",{attrs:{id:"_6-数据代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-数据代理"}},[n._v("#")]),n._v(" 6，数据代理")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<div id=\"root\">\n\t\tvm身上所有的属性及vue原型上所有属性，在模版中都可以直接使用，如下\n        <h1>测试：{{$options}}</h1>\n</div>\n    \x3c!-- 一个容器只能被一个实例接管  --\x3e\n    <script type=\"text/javascript\">\n        // 阻止vue在启动时生成生产提示\n        Vue.config.productionTip=false\n        // 数据代理，通过对象代理对另一个对象中的属性的操作\n        let obj1={\n            x:100\n        }\n        let obj2={\n            y:100\n        }\n        Object.defineProperty(obj2,'x',{\n            get(){\n                return obj1.x\n            },\n            set(valobj){\n                obj1.x=valobj\n            }\n        })\n\n        let num=18\n        var student={\n            name:'suerting',\n            sex:'女'\n        }\n        Object.defineProperty(student,'age',{//写在里面的age不能枚举/遍历\n            // value:num,\n            enumerable:true,//允许枚举\n            // writable:true,//允许修改\n            configurable:true,//允许删除\n            get(){\n                console.log('有人在读取num，修改num能修改age,get被自动调用')\n                return num\n            },\n            set(value){\n                console.log('有人修改age，反过来num也能修改,只要有人修改，就调用set')\n                num=value\n            }\n            \n        })\n        // console.log(Object.keys())//将传入对象的属性名提取出来变成数组\n        console.log(student)\n<\/script>\n")])])]),t("h3",{attrs:{id:"_7-mvvm模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-mvvm模型"}},[n._v("#")]),n._v(" 7，MVVM模型")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1，M：模型：对应data中的数据\n2，V：视图：模版\n3，VM：视图模型：Vue实例对象 new Vue\n<div id=\"root\">\n        \x3c!-- {{}}分隔符 --\x3e\n        <h1>学校名称：{{name}}</h1>\n        <h1>学校地址：{{address}}</h1>\n        vm身上所有的属性及vue原型上所有属性，在模版中都可以直接使用，如下\n        <h1>测试：{{$options}}</h1>\n        \x3c!-- MVVM模型 --\x3e\n</div>\n<script type=\"text/javascript\">\n    // 阻止vue在启动时生成生产提示\n    Vue.config.productionTip=false\n    const vm=new Vue({\n     el:'#root',//第一种写法\n     // data的第二种写法：函数式\n     // 可简写为data(){}\n     data:function(){\n          console.log('@@@',this)//此处的this是Vue实例对象\n           return{\n              name:'suerting',\n              address:'wowoowowo'\n           }\n      }\n })\n<\/script>\n")])])]),t("h3",{attrs:{id:"_8-事件处理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-事件处理器"}},[n._v("#")]),n._v(" 8，事件处理器")]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("v-on:click，当被点击的时候，执行回调函数，可简写为@click")])]),t("h4",{attrs:{id:"传参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传参"}},[n._v("#")]),n._v(" 传参")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div>\n    <button v-on:click="showInfo">点我1不传参</button>\n     函数传数字\n     \x3c!-- $event占位 --\x3e\n     <button v-on:click="showInfo2(748,$event)">点我2传参</button>\n</div>\n\n<script type="text/javascript">\n     Vue.config.productionTip=false // 阻止vue在启动时生成生产提示\n     const vm=new Vue({\n          el:\'#root\',\n          data:({\n                \n            }),\n            methods:{\n                // 事件的回调都配置在methods中，最终会在vm上\n                //函数都写成普通函数，this表示vue实例，不要写成箭头函数，箭头函数中的this是window\n                showInfo(e){\n                    alert("点击事件1")\n                },\n                showInfo2(number,a){\n                    console.log(number,a)\n                    console.log(event.target.innerText)\n                    alert("点击事件2:"+number)\n                }\n            }\n        })\n<\/script>\n')])])]),t("h4",{attrs:{id:"事件修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件修饰符"}},[n._v("#")]),n._v(" 事件修饰符")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div id="root">\n\t\x3c!-- .prevent事件修饰符，阻止默认事件页面跳转 --\x3e\n    <a href="http://www.baidu.com" @click.prevent="xiushi">跳百度</a>\n     \x3c!-- 阻止事件冒泡 ，点击按钮，冒泡到div元素,由内到外--\x3e\n     <div class="stop" @click="xiushi1">\n         <button @click.stop="xiushi2">阻止冒泡</button>\n     </div>\n     \x3c!-- 事件只会触发一次 --\x3e\n     <button @click.once="xiushi2">只会弹窗一次</button>\n     \x3c!-- 使用事件的捕获模式,由外往内 --\x3e\n     <div class="box1" @click.capture="xiabiao(1)">\n         11111\n         <div class="box2" @click="xiabiao(2)">\n              2222222\n         </div>\n      </div>\n      \x3c!-- 只有event.trarget是当前操作元素时才能触发事件 --\x3e\n      \x3c!-- self也可有效阻止冒泡 --\x3e\n      <div class="self" @click.self="xiushi1">\n          <button @click="xiushi2">阻止冒泡</button>\n      </div>\n</div>\n\n<script type="text/javascript">\n     Vue.config.productionTip=false // 阻止vue在启动时生成生产提示\n     const vm=new Vue({\n          el:\'#root\',\n          data:({\n                \n            }),\n            methods:{\n                // 事件的回调都配置在methods中，最终会在vm上\n                //函数都写成普通函数，this表示vue实例，不要写成箭头函数，箭头函数中的this是window\n                xiushi1(e){\n                    // e.preventDefault()//阻止页面跳转\n                    // e.stopPropagation()//阻止冒泡\n                    alert("修饰符操作外层div")\n                }, \n                xiushi2(e){\n                    // e.preventDefault()//阻止页面跳转\n                    // e.stopPropagation()//阻止冒泡\n                    alert("修饰符操作内层button")\n                },\n                xiabiao(index){\n                    alert(index)\n                    console.log(index)\n                }\n            }\n        })\n<\/script>\n')])])]),t("h4",{attrs:{id:"滚轮"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#滚轮"}},[n._v("#")]),n._v(" 滚轮")]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("scroll是页面滚动条滚动会触发的事件，而wheel是鼠标滚轮滚动会触发的事件。\n一旦滚动条到底部后，滑动鼠标滚轮继续滚动，wheel就会一直触发，而scroll不会触发。\nscroll需等待回调函数执行完毕才触发，wheel无需等待回调函数执行完毕就可以触发")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div id="root">\n    <ul @scroll="scroll" class="list1">\n                <Li>1</Li>\n                <Li>2</Li>\n                <Li>3</Li>\n                <Li>4</Li>\n    </ul>\n    \x3c!-- 绑定滚动事件 @wheel滚动轮的滚动--\x3e\n    <ul @wheel.passive="wheel" class="list2">\n                <Li>1</Li>\n                <Li>2</Li>\n                <Li>3</Li>\n                <Li>4</Li>\n    </ul>\n<div id="root">\n\n<script type="text/javascript">\n     Vue.config.productionTip=false // 阻止vue在启动时生成生产提示\n     const vm=new Vue({\n          el:\'#root\',\n          data:({\n                \n            }),\n            methods:{\n                // 事件的回调都配置在methods中，最终会在vm上\n                //函数都写成普通函数，this表示vue实例，不要写成箭头函数，箭头函数中的this是window\n                scroll(){\n                    console.log(\'scroll滚动\')\n                },\n                wheel(){\n                    console.log(\'wheel\')\n                    for(let i=0;i<10000;i++){\n                        console.log (\'djfh\')\n                    }\n                    console.log(\'累死\')\n                }\n            }\n     })\n<\/script>\n')])])]),t("h3",{attrs:{id:"_9-键盘事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-键盘事件"}},[n._v("#")]),n._v(" 9，键盘事件")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div id="root">\n        <h2>{{name}}</h2>\n        \x3c!-- 绑定键盘事件，keydown按下去不用松就提示，keyup按下去松手触发 退出esc等;enter等是vue起的别名，实际是Enter--\x3e\n        <input type="text" placeholder="触发键盘事件，打开控制台" @keyup="jianpan"><br>\n        <input type="text" placeholder="按下回车提示输入" @keyup.enter="jianpan"><br>\n        <input type="text" placeholder="删除" @keyup.delete="jianpan"><br>\n        <input type="text" placeholder="驼峰命名：CapsLock，将大写该小写，中间用-连接" @keyup.caps-lock="jianpan"><br>\n        <input type="text" placeholder="tab,使用keyup会使定位元素切走" @keydown.tab="jianpan"><br>\n\n        <h2>系统修饰键，ctrl，alt，shift，meta</h2><br>\n        <input type="text" placeholder="使用keyup，必修按ctrl后再按其他键，然后释放其他键，时间才被触发" @keyup.ctrl="jianpan"><br>\n        <input type="text" placeholder="使用keyup，设定ctrl+y触发的按键，其他的都不行" @keyup.ctrl.y="jianpan"><br>\n        <input type="text" placeholder="使用keydown，正常使用" @keydown.ctrl="jianpan"><br>\n\n        <input type="text" placeholder="自己定义别名按键" @keyup.huiche="jianpan"><br>\n\n    </div>\n    <script type="text/javascript">\n        Vue.config.productionTip=false // 阻止vue在启动时生成生产提示\n        // 自己定义别名按键\n        Vue.config.keyCodes.huiche=13\n        new Vue({\n            el:\'#root\',\n            data:{\n                name:\'键盘处理\'\n            },\n            methods:{\n                jianpan(e){\n                    // console.log(e.keyCode)//按键的编码\n                    console.log(e.target.value),\n                    console.log(e.key,e.keyCode)\n                }\n            }\n        })\n\n    <\/script>\n')])])]),t("h3",{attrs:{id:"_10-计算属性与监视"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-计算属性与监视"}},[n._v("#")]),n._v(" 10，计算属性与监视")]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("使用计算属性是因为要用的属性不存在，通过已有的属性计算得来")]),n._v(" "),t("p",[n._v("与methods相比，有缓存机制，效率高")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("使用姓和名的例子说明三种方法的区别\n1，v-model，插值语法\n2,methods实现，改变上述全名的复杂操作\n3,计算属性实现\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div id="root">\n    <h2>1,v-model，插值语法</h2>\n    姓：<input type="text" v-model="namex1"><br>\n    名：<input type="text" v-model="namem1"><br>\n    <span>全名1：{{namex1}}-{{namem1}}</span><br>\n    <span>全名2只截取姓的前三位：\n    \t{{namex1.slice(0,3).split(\'\').reverse().join(\'\')}}-{{namem1}}\n    </span>\n</div>\n\n<script type="text/javascript">\n    Vue.config.productionTip=false;\n     const vm=new Vue({\n          el:\'#root\',\n          data:function(){\n               return{\n               \t  namex1:\'苏\',\n                  namem1:\'婷\'\n               }\n           }\n <\/script>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div id="root">\n    <h2>2,methods实现，改变上述全名的复杂操作</h2>\n    姓：<input type="text" v-model="namex2"><br>\n    名：<input type="text" v-model="namem2"><br>\n    全名：<span>{{fullname1()}}</span>\n</div>\n\n<script type="text/javascript">\n      Vue.config.productionTip=false;\n      const vm=new Vue({\n          el:\'#root\',\n          data:function(){\n              return{\n                  namex2:\'苏\',\n                  namem2:\'婷\'\n              }\n           },\n          methods:{\n               fullname1(){\n                   return this.namex2+\'-\'+this.namem2\n               }\n          }\n<\/script>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<div id=\"root\">\n    <h2>3,计算属性实现</h2>\n    <h3>使用计算属性是因为要用的属性不存在，通过已有的属性计算得来,与methods相比，有缓存机制，效率高</h3>\n    姓：<input type=\"text\" v-model=\"namex3\"><br>\n    名：<input type=\"text\" v-model=\"namem3\"><br>\n    全名：<span>{{fullname2}}</span>\n</div>\n\n<script type=\"text/javascript\">\n        Vue.config.productionTip=false;\n        const vm=new Vue({\n            el:'#root',\n            data:function(){\n                return{\n                    namex3:'苏',\n                    namem3:'婷'\n                }\n            }\n            // 计算属性\n            computed:{\n                // fullname2:{\n                //     // 当有人读取fullname2时，get就会被调用，且返回值就是fullname2的值\n                //     //get在初次读取fullname2时被调用，在所依赖的数据发生变化时被调用\n                //     get(){\n                //         return this.namex3+'-'+this.namem3\n                //     },\n                //     // 当fullname被修改时，调用set\n                //     set(value){\n                //         const arr=value.split('-')\n                //         this.namex3=arr[0]\n                //         this.namem3=arr[2]\n                //     }\n                // }\n                // 简写\n                fullname2(){\n                    return this.namex3+'-'+this.namem3\n                }\n\n            }\n        })\n    <\/script>\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("computed里的方法在初始化执行过后，只要任何值有更新，那么所有在computed计算属性里和其相关的值都会更新。\nmethods只有在调用的时候才会执行对应的方法，不会自动同步数据。")])]),t("h3",{attrs:{id:"_11-监听属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-监听属性"}},[n._v("#")]),n._v(" 11，监听属性")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<div id=\"root\">\n    <h2>今天天气{{info}}，是的加{{a}}</h2>\n     第一种，表达式\n     <button @click=\"weather=!weather,a++\">切换天气</button>\n</div>\n\n<script type=\"text/javascript\">\n        Vue.config.productionTip=false;\n        const vm=new Vue ({\n            el:'#root',\n            data:{\n                weather:true,\n                a:0\n            },\n             computed:{\n                info(){\n                    return this.weather ? '炎热':'凉快'\n                }\n            },\n          })\n<\/script>\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<div id=\"root\">\n    <h2>今天天气{{info}}，是的加{{a}}</h2>\n    第二种方法，回调函数\n    <button @click=\"clickweather\">切换天气</button>\n</div>\n\n<script type=\"text/javascript\">\n        Vue.config.productionTip=false;\n        const vm=new Vue ({\n            el:'#root',\n            data:{\n                name:'vue6监听属性案例',\n                weather:true,\n                a:0\n            },\n            methods: {\n                clickweather(){\n                    this.weather=!this.weather,\n                    this.a++\n                }\n            },\n            computed:{\n                info(){\n                    return this.weather ? '炎热':'凉快'\n                }\n            },\n            // 监视（在控制台）\n            //监视对象内部值的改变（一层）\n            watch:{\n                // 监视谁\n                weather:{\n                    immediate:true,//初始化时让handle调用一下\n                    //当weather发生改变时调用handle\n                    handler(newValue,oldValue){\n                        console.log('weather被修改，handler被调用',newValue,oldValue)\n                    }\n                },\n                info:{\n                    immediate:true,//初始化时让handle调用一下\n                    //当weather发生改变时调用handle\n                    handler(newValue,oldValue){\n                        console.log('info被修改，handler被调用',newValue,oldValue)\n                        console.log('调用前的值',newValue)\n                        console.log('调用后的值',oldValue)\n                    }\n                }\n           }\n})\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("也可通过vm进行监视\nvm.$watch('weather',{\n     immediate:true,//初始化时让handle调用一下\n     //当weather发生改变时调用handle\n     handler(newValue,oldValue){\n         console.log('通过vm实现监视')\n         console.log('weather被修改，handler被调用',newValue,oldValue)\n         console.log('调用前的值',newValue)\n         console.log('调用后的值',oldValue)\n      }\n})\n\n// 简写\nvm.$watch('weather',function(newValue,oldValue){\n        console.log('通过vm实现监视的简写',newValue,oldValue)\n})\n")])])]),t("h4",{attrs:{id:"深度监视"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度监视"}},[n._v("#")]),n._v(" 深度监视")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<div id=\"root\">\n\t<h2>深度监视</h2>\n    <h2>b的值：{{numbers.b}}</h2>\n    <button @click=\"numbers.b++\">点击增加b</button>\n    <h2>c的值：{{numbers.c}}</h2>\n    <button @click=\"numbers.c++\">点击增加c</button>\n</div>\n<script type=\"text/javascript\">\n        Vue.config.productionTip=false;\n        const vm=new Vue ({\n            el:'#root',\n            data:{\n                //深度监视\n                numbers:{\n                    b:1,\n                    c:1\n                }\n            },\n            watch:{\n                // 监视多级结构中某个属性的变化\n                'numbers.b':{\n                    handler(){\n                        console.log('numbers中b的值被修改')\n                    }\n                },\n                // 监视多级属性中所有属性的变化\n                numbers:{\n                    deep:true,//可以检测到对象内部值改变（多层）\n                    handler(){\n                        console.log('深度监视numbers中某值被修改')\n                    }\n                }\n            }\n})\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("深度监视是监视多级属性中所有属性的变化，只要有一个修改，就会被检测到")])]),t("h3",{attrs:{id:"_12-计算属性与监听属性的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-计算属性与监听属性的区别"}},[n._v("#")]),n._v(" 12，计算属性与监听属性的区别")]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("监听属性代码是命令式且重复的")]),n._v(" "),t("p",[n._v("computed的能完成的功能，watch都可以完成，")]),n._v(" "),t("p",[n._v("watch能完成的功能，computed不一定能完成，例如watch可以开启异步任务定时操作")])]),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"title"}),t("p",[n._v("所有被vue管理的函数最好写成普通函数，这样this的指向才是vm或组件实例对象")]),n._v(" "),t("p",[n._v("所有不被vue管理的函数（定时器的回调函数，Ajax的回调函数，promise的回调函数），最好写成箭头函数，这样this的指向才是vm或组件实例对象")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div id="root">\n        姓：<input type="text" v-model="firstname"><br>\n        名：<input type="text" v-model="lastname"><br>\n        全名：<span>{{fullname}}</span>\n\n</div>\n<script type="text/javascript">\n        Vue.config.productionTip = false;\n        const vm=new Vue({\n            el:"#root",\n            data:{\n                firstname:\'Su\',\n                lastname:\'ting\',\n                fullname:\'Su-ting\'\n            },\n            // computed与watch配置项不冲突\n            computed:{\n\n            },\n            watch:{\n                firstname(newValue){\n                    // 等一秒在执行\n                    setTimeout(() => {\n                        this.fullname=newValue+\'-\'+this.lastname\n                    }, 1000);\n                },\n                lastname(newValue){\n                    this.fullname=this.firstname+\'-\'+newValue\n                }\n            }\n        })\n<\/script>\n')])])]),t("h3",{attrs:{id:"_13-绑定class样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-绑定class样式"}},[n._v("#")]),n._v(" 13，绑定class样式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("准备样式\n<style>\n        *{\n            margin-top: 20px;\n        }\n        .basic{\n            width: 20%;\n            height: 150px;\n            border: 1px solid red;\n        }\n        .yangshi1{\n            background-color: rgb(238, 126, 143);\n            font-size: 20px;\n        }\n        .yangshi2{\n        \tbackground-color:rgb(235, 162, 248)\n            color: blue;\n            text-align: center\n        }\n        .yangshi3{\n        \tbackground-color: rgb(108, 243, 198);\n            border-radius: 10%;\n        }\n</style>\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("绑定class样式，字符串写法，适用于：样式的类名不确定，需要动态指定")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<div id=\"root\">\n        \x3c!-- 绑定class样式，字符串写法，适用于：样式的类名不确定，需要动态指定 --\x3e\n        <div class=\"basic\" :class=\"css\" @click=\"changecss\">wr</div>\n</div>\n<script type=\"text/javascript\">\n        Vue.config.productionTip = false;\n        const vm=new Vue({\n            el:'#root',\n            data() {\n                return {\n                    css:'yangshi1',\n                }\n            },\n            methods: {\n            \t//点击更换样式\n                changecss(){\n                    // 指定样式\n                    // this.css='yangshi1'\n                    // 随机生成\n                    const arr=['yangshi1','yangshi2','yangshi3']\n                    // Math.random()生成得数在0-1之间，趋近于1，乘以1区间在0-2.xxx之间，Math.floor()向下取整，有0,1,2三个数\n                    const index=Math.floor(Math.random()*3)\n                    this.css=arr[index]\n                }\n            },\n        })\n <\/script>\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("绑定class样式，数组写法，适用于：要绑定的样式个数不确定，类名不确定")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<div id=\"root\">\n        \x3c!-- 绑定class样式，数组写法，适用于：要绑定的样式个数不确定，类名不确定 --\x3e\n        <div class=\"basic\" :class=\"arryangshi\">wr</div>\n</div>\n<script type=\"text/javascript\">\n        Vue.config.productionTip = false;\n        const vm=new Vue({\n            el:'#root',\n            data() {\n                return {\n                    arryangshi:['yangshi1','yangshi2','yangshi3']\n                }\n            }\n        })\n<\/script>\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("绑定class样式，对象写法，适用于：要绑定的样式个数确定，类名确定 ,但要动态决定用不用")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div id="root">\n        \x3c!-- 绑定class样式，对象写法，适用于：要绑定的样式个数确定，类名确定 ,但要动态决定用不用--\x3e\n        <div class="basic" :class="ifyangshi">wr</div>\n</div>\n<script type="text/javascript">\n        Vue.config.productionTip = false;\n        const vm=new Vue({\n            el:\'#root\',\n            data() {\n                return {\n                    ifyangshi:{\n                        yangshi2:true,\n                        yangshi3:false\n                    }\n                }\n            }\n        })\n<\/script>\n')])])]),t("h3",{attrs:{id:"_14-绑定style样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-绑定style样式"}},[n._v("#")]),n._v(" 14，绑定style样式")]),n._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("对象写法")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\t<div class=\"basic\" :style=\"{fontSize:fsize+'px'}\">wr</div>\n        另一种对象写法\n    <div class=\"basic\" :style=\"stylebd1\">wr</div>\n\n\tconst vm=new Vue({\n            el:'#root',\n            data() {\n                return {\n                    fsize:80,\n                    stylebd1:{\n                        textAlign:'center',\n                        fontSize:'50px',\n                        color:'red'\n                    }\n                }\n            }\n    })\n")])])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[n._v("数组写法")])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\t数组方式1\n    <div class=\"basic\" :style=\"[stylebd1,stylebd2]\">wr</div>\n    数组方式2\n    <div class=\"basic\" :style=\"styleArr\">wr</div>\n    \n    const vm=new Vue({\n            el:'#root',\n            data() {\n                return {\n                    stylebd1:{\n                        textAlign:'center',\n                        fontSize:'50px',\n                        color:'red'\n                    },\n                    stylebd2:{\n                        backgroundColor:'orange'\n                    },\n                    styleArr:[\n                        {\n                            textAlign:'center',\n                            fontSize:'50px',\n                            color:'red'\n                        },\n                        {\n                            backgroundColor:'green',\n                        }\n                    ]\n                    }\n                }\n    })\n\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);